(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.{{moduleName}}) {
      root.{{moduleName}} = {};
    }
    root.{{moduleName}}.{{classname}} = factory(root.{{moduleName}}.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  var {{classname}} = function {{classname}}(apiClient) {
    this.apiClient = apiClient || ApiClient.default;

    var self = this;
    {{#operations}}
    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
  {{#allParams}}   * @param {{=<% %>=}}{<% dataType %>} <%={{ }}=%> {{paramName}} {{description}}
  {{/allParams}}   * @param {function} callback the callback function, accepting three arguments: error, data, response{{#returnType}}
     *   data is of type: {{{returnType}}}{{/returnType}}
     */
    self.{{nickname}} = function({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}}, {{/hasParams}}callback) {
      var postBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
      {{#allParams}}{{#required}}
      // verify the required parameter '{{paramName}}' is set
      if ({{paramName}} == null) {
        throw "Missing the required parameter '{{paramName}}' when calling {{nickname}}";
      }
      {{/required}}{{/allParams}}

      {{=< >=}}
      var pathParams = {<#pathParams>
        '<baseName>': <paramName><#hasMore>,</hasMore></pathParams>
      };
      var queryParams = {<#queryParams>
        '<baseName>': <paramName><#hasMore>,</hasMore></queryParams>
      };
      var headerParams = {<#headerParams>
        '<baseName>': <paramName><#hasMore>,</hasMore></headerParams>
      };
      var formParams = {<#formParams>
        '<baseName>': <paramName><#hasMore>,</hasMore></formParams>
      };

      var contentTypes = [<#consumes>'<mediaType>'<#hasMore>, </hasMore></consumes>];
      var accepts = [<#produces>'<mediaType>'<#hasMore>, </hasMore></produces>];

      return this.apiClient.callApi(
        '<&path>', '<httpMethod>',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, callback
      );
      <={{ }}=>
    }
    {{/operation}}
    {{/operations}}
  };

  return {{classname}};
}));
